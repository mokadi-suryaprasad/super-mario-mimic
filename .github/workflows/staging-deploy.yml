name: Staging Deployment

on:
  push:
    branches:
      - pre-prod

jobs:
  deploy-staging:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Install dependencies & build
      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build

      # Step 4: Authenticate to GCP
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 5: Setup gcloud CLI
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Step 6: Upload build artifacts to GCS
      - name: Upload build artifacts to GCS
        run: |
          if [ -d build ]; then
            gsutil -m cp -r build/* gs://${{ secrets.GCS_BUCKET_NAME }}/nodejs-app/${{ github.sha }}/
          else
            echo "Build folder not found!"
            exit 1
          fi

      # Step 7: Build Docker image
      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.GCP_GCR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/microservicequiz/nodejs-app:staging-${{ github.sha }}
          docker build -t $IMAGE .

      # Step 8: Trivy Scan
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.GCP_GCR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/microservicequiz/nodejs-app:staging-${{ github.sha }}
          format: table
          exit-code: '0'
          ignore-unfixed: true

      # Step 9: Push Docker image
      - name: Push Docker image
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_GCR_REGION }}-docker.pkg.dev --quiet
          docker push ${{ secrets.GCP_GCR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/microservicequiz/nodejs-app:staging-${{ github.sha }}

      # Step 10: Run OWASP ZAP scan
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: 'https://staging.example.com'  # Replace with actual staging URL
          cmd_options: '-r zap_report.html'

      # Step 11: Upload OWASP ZAP report to GCS
      - name: Upload OWASP ZAP report to GCS
        run: |
          gsutil cp zap_report.html gs://${{ secrets.GCS_BUCKET_NAME }}/nodejs-app/zap_reports/zap_report-${{ github.sha }}.html

      # Step 12: Update Helm values-staging.yaml
      - name: Update Helm values-staging.yaml
        run: |
          git clone https://x-access-token:${{ secrets.HELM_REPO_GITHUB_TOKEN }}@github.com/mokadi-suryaprasad/helm-nodejs-app.git
          cd helm-nodejs-app
          sed -i "s#tag:.*#tag: staging-${{ github.sha }}#g" values-staging.yaml

      # Step 13: Commit & Push Helm changes
      - name: Commit & Push Helm changes
        run: |
          cd helm-nodejs-app
          git config user.name "M Surya Prasad"
          git config user.email "mspr9773@gmail.com"
          git add values-staging.yaml
          git commit -m "Update staging image tag to staging-${{ github.sha }}" || echo "No changes to commit"
          git push origin main
